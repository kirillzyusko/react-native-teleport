"use strict";(self.webpackChunkreact_native_teleport_docs=self.webpackChunkreact_native_teleport_docs||[]).push([[1063],{6800:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/portal-2b20b94e26669e61959d937697ed6dde.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(6540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},9743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"guides/portal","title":"Portal","description":"Portal helps you to render a component in a different place in the view hierarchy.","source":"@site/docs/guides/portal.md","sourceDirName":"guides","slug":"/guides/portal","permalink":"/react-native-teleport/pr-preview/pr-22/docs/guides/portal","draft":false,"unlisted":false,"editUrl":"https://github.com/kirillzyusko/react-native-teleport/tree/main/docs/docs/guides/portal.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"Portal helps you to render a component in a different place in the view hierarchy.","keywords":["react-native-teleport","react-native teleport","react-native portal","teleport","portal","modal","popover","tooltip","alert","toast"]},"sidebar":"tutorialSidebar","previous":{"title":"Guides","permalink":"/react-native-teleport/pr-preview/pr-22/docs/category/guides"},"next":{"title":"Teleport","permalink":"/react-native-teleport/pr-preview/pr-22/docs/guides/teleport"}}');var o=n(4848),i=n(8453);const a={sidebar_position:2,description:"Portal helps you to render a component in a different place in the view hierarchy.",keywords:["react-native-teleport","react-native teleport","react-native portal","teleport","portal","modal","popover","tooltip","alert","toast"]},s="Portal",l={},c=[{value:"Why use Portal?",id:"why-use-portal",level:2},{value:"Example",id:"example",level:2},{value:"Best practices",id:"best-practices",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"portal",children:"Portal"})}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.strong,{children:"Portal"})," API allows you to render a component in a different place in the view hierarchy.\nThis is useful when you need a view to visually \u201cbreak out\u201d of its parent container (for example: modals, toasts, floating UI, popovers)."]}),"\n",(0,o.jsx)("div",{className:"lottie",children:(0,o.jsx)("img",{src:n(6800).A,alt:"Portal helps to render a new view in a different container"})}),"\n",(0,o.jsxs)(t.p,{children:["Unlike simple ",(0,o.jsx)(t.code,{children:"zIndex"})," tricks, Portals actually move the native view to another container, which guarantees correct behavior across different platforms, stacking contexts, and clipping boundaries."]}),"\n",(0,o.jsx)(t.h2,{id:"why-use-portal",children:"Why use Portal?"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Escape parent clipping: Portals are not limited by ",(0,o.jsx)(t.code,{children:"overflow: hidden"})," or scroll containers."]}),"\n",(0,o.jsxs)(t.li,{children:["Native-level stacking: Works even where ",(0,o.jsx)(t.code,{children:"zIndex"})," fails."]}),"\n",(0,o.jsx)(t.li,{children:"Cross-platform: Consistent on iOS, Android and web."}),"\n",(0,o.jsx)(t.li,{children:"Dynamic UI: Great for modals, floating buttons, dropdowns, tooltips, and system-like overlays."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'import { useState } from "react";\nimport { View, StyleSheet, Button } from "react-native";\nimport { Portal } from "react-native-teleport";\n\nexport default function InstantRootExample() {\n  const [shouldBeTeleported, setTeleported] = useState(true);\n\n  return (\n    <View style={styles.container}>\n      {shouldBeTeleported && (\n        <Portal hostName={"overlay"}>\n          <View style={styles.box} testID="touchable" />\n        </Portal>\n      )}\n      <Button\n        title={shouldBeTeleported ? "Hide" : "Show"}\n        onPress={() => setTeleported((t) => !t)}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: "center",\n    justifyContent: "center",\n  },\n  box: {\n    width: 160,\n    height: 160,\n    marginVertical: 20,\n    backgroundColor: "blue",\n  },\n});\n'})}),"\n",(0,o.jsx)(t.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["Always declare at least one ",(0,o.jsx)(t.code,{children:"<PortalHost />"})," near your app root."]}),"\n",(0,o.jsx)(t.li,{children:"Use host names if you need multiple layers (e.g., modal, toast, tooltip)."}),"\n"]}),"\n",(0,o.jsx)(t.admonition,{title:"Teleportation",type:"tip",children:(0,o.jsxs)(t.p,{children:["\u26a1 ",(0,o.jsx)(t.strong,{children:"Tip"}),": If you need to move an ",(0,o.jsx)(t.strong,{children:"existing"})," view (without unmounting/remounting), check out ",(0,o.jsx)(t.a,{href:"./teleport",children:"Teleport"})," guide."]})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);