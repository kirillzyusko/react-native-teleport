"use strict";(self.webpackChunkreact_native_teleport_docs=self.webpackChunkreact_native_teleport_docs||[]).push([[63],{6800:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/portal-2b20b94e26669e61959d937697ed6dde.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(6540);const r={},i=o.createContext(r);function a(e){const t=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:t},e.children)}},9743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/portal","title":"Portal","description":"Portal helps you to render a component in a different place in the view hierarchy.","source":"@site/docs/guides/portal.md","sourceDirName":"guides","slug":"/guides/portal","permalink":"/react-native-teleport/pr-preview/pr-12/docs/guides/portal","draft":false,"unlisted":false,"editUrl":"https://github.com/kirillzyusko/react-native-teleport/tree/main/docs/docs/guides/portal.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"Portal helps you to render a component in a different place in the view hierarchy.","keywords":["react-native-teleport","react-native teleport","react-native portal","teleport","portal","modal","popover","tooltip","alert","toast"]},"sidebar":"tutorialSidebar","previous":{"title":"Main concepts","permalink":"/react-native-teleport/pr-preview/pr-12/docs/guides/main-concepts"},"next":{"title":"Teleport","permalink":"/react-native-teleport/pr-preview/pr-12/docs/guides/teleport"}}');var r=n(4848),i=n(8453);const a={sidebar_position:2,description:"Portal helps you to render a component in a different place in the view hierarchy.",keywords:["react-native-teleport","react-native teleport","react-native portal","teleport","portal","modal","popover","tooltip","alert","toast"]},s="Portal",l={},c=[{value:"Why use Portal?",id:"why-use-portal",level:2},{value:"Example",id:"example",level:2},{value:"Best practices",id:"best-practices",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"portal",children:"Portal"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Portal"})," API allows you to render a component in a different place in the view hierarchy.\nThis is useful when you need a view to visually \u201cbreak out\u201d of its parent container (for example: modals, toasts, floating UI, popovers)."]}),"\n",(0,r.jsx)("div",{className:"lottie",children:(0,r.jsx)("img",{src:n(6800).A,alt:"Portal helps to render a new view in a different container"})}),"\n",(0,r.jsxs)(t.p,{children:["Unlike simple ",(0,r.jsx)(t.code,{children:"zIndex"})," tricks, Portals actually move the native view to another container, which guarantees correct behavior across different platforms, stacking contexts, and clipping boundaries."]}),"\n",(0,r.jsx)(t.h2,{id:"why-use-portal",children:"Why use Portal?"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Escape parent clipping: Portals are not limited by ",(0,r.jsx)(t.code,{children:"overflow: hidden"})," or scroll containers."]}),"\n",(0,r.jsxs)(t.li,{children:["Native-level stacking: Works even where ",(0,r.jsx)(t.code,{children:"zIndex"})," fails."]}),"\n",(0,r.jsx)(t.li,{children:"Cross-platform: Consistent on iOS, Android and web."}),"\n",(0,r.jsx)(t.li,{children:"Dynamic UI: Great for modals, floating buttons, dropdowns, tooltips, and system-like overlays."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"// TODO: check example validity"}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:'import { Portal, PortalHost } from "react-native-teleport";\nimport { View, Text, Button } from "react-native";\n\nexport default function App() {\n  const [visible, setVisible] = React.useState(false);\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Button title="Open modal" onPress={() => setVisible(true)} />\n\n      {/* Place a PortalHost at the root of your app */}\n      <PortalHost name="root" />\n\n      {visible && (\n        <Portal host="root">\n          <View\n            style={{\n              position: "absolute",\n              top: 100,\n              left: 50,\n              width: 200,\n              height: 200,\n              backgroundColor: "white",\n              elevation: 10,\n              justifyContent: "center",\n              alignItems: "center",\n            }}\n          >\n            <Text>Hello from Portal!</Text>\n            <Button title="Close" onPress={() => setVisible(false)} />\n          </View>\n        </Portal>\n      )}\n    </View>\n  );\n}\n'})}),"\n",(0,r.jsx)(t.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Always declare at least one ",(0,r.jsx)(t.code,{children:"<PortalHost />"})," near your app root."]}),"\n",(0,r.jsx)(t.li,{children:"Use host names if you need multiple layers (e.g., modal, toast, tooltip)."}),"\n"]}),"\n",(0,r.jsx)(t.admonition,{title:"Teleportation",type:"tip",children:(0,r.jsxs)(t.p,{children:["\u26a1 ",(0,r.jsx)(t.strong,{children:"Tip"}),": If you need to move an ",(0,r.jsx)(t.strong,{children:"existing"})," view (without unmounting/remounting), check out ",(0,r.jsx)(t.a,{href:"./teleport",children:"Teleport"})," guide."]})})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);