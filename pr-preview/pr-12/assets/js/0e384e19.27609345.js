"use strict";(self.webpackChunkreact_native_teleport_docs=self.webpackChunkreact_native_teleport_docs||[]).push([[976],{2053:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"intro","title":"Intro","description":"Intro into portal and teleport concepts","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/react-native-teleport/pr-preview/pr-12/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/kirillzyusko/react-native-teleport/tree/main/docs/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"Intro into portal and teleport concepts","keywords":["react-native-teleport","react-native teleport","react-native portal","portal","teleport"]},"sidebar":"tutorialSidebar","next":{"title":"Installation","permalink":"/react-native-teleport/pr-preview/pr-12/docs/installation"}}');var i=r(4848),o=r(8453);const a={sidebar_position:1,description:"Intro into portal and teleport concepts",keywords:["react-native-teleport","react-native teleport","react-native portal","portal","teleport"]},s="Intro",l={},c=[{value:"What is the portal?",id:"what-is-the-portal",level:2},{value:"Why another portal library for <code>react-native</code>?",id:"why-another-portal-library-for-react-native",level:2},{value:"Introducing <code>react-native-teleport</code>",id:"introducing-react-native-teleport",level:2},{value:"Why native portals matter",id:"why-native-portals-matter",level:2},{value:"Next steps",id:"next-steps",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"intro",children:"Intro"})}),"\n",(0,i.jsx)(t.h2,{id:"what-is-the-portal",children:"What is the portal?"}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.strong,{children:"Portal"})," is a React concept that lets you render a component in a different place in the UI tree, while keeping it logically connected to its parent."]}),"\n",(0,i.jsxs)(t.p,{children:["On the web, this is typically done with ",(0,i.jsx)(t.a,{href:"https://react.dev/reference/react-dom/createPortal",children:(0,i.jsx)(t.code,{children:"createPortal"})}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Portals are commonly used for UI elements such as:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Modals"}),"\n",(0,i.jsx)(t.li,{children:"Tooltips"}),"\n",(0,i.jsx)(t.li,{children:"Popovers"}),"\n",(0,i.jsx)(t.li,{children:"Floating views"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"These are cases where the visual position of a component differs from its logical position in the React tree."}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.h2,{id:"why-another-portal-library-for-react-native",children:["Why another portal library for ",(0,i.jsx)(t.code,{children:"react-native"}),"?"]}),"\n",(0,i.jsxs)(t.p,{children:["React Native does ",(0,i.jsx)(t.strong,{children:"not yet provide"})," a built-in ",(0,i.jsx)(t.code,{children:"Portal"})," implementation (",(0,i.jsx)(t.a,{href:"https://github.com/facebook/react-native/issues/36273",children:"issue #36273"}),").",(0,i.jsx)(t.br,{}),"\n","Existing community libraries, such as ",(0,i.jsx)(t.a,{href:"https://github.com/gorhom/react-native-portal",children:"@gorhom/portal"})," or ",(0,i.jsx)(t.a,{href:"https://github.com/cloudflare/react-gateway",children:"react-gateway"}),", solve this with ",(0,i.jsx)(t.strong,{children:"JavaScript-based portals"}),". They work well for many scenarios but come with important trade-offs:"]}),"\n",(0,i.jsxs)(t.p,{children:["\u274c Components are ",(0,i.jsx)(t.strong,{children:"re-parented in JS"}),", not in the actual native view tree.",(0,i.jsx)(t.br,{}),"\n","\u274c This can break or block access to ",(0,i.jsx)(t.strong,{children:"React Context"})," values (theme, navigation, i18n, etc.).",(0,i.jsx)(t.br,{}),"\n","\u274c Rendering is still bound to the JS layer, which can limit ",(0,i.jsx)(t.strong,{children:"performance"})," and ",(0,i.jsx)(t.strong,{children:"platform-native behaviors"}),"."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.h2,{id:"introducing-react-native-teleport",children:["Introducing ",(0,i.jsx)(t.code,{children:"react-native-teleport"})]}),"\n",(0,i.jsxs)(t.p,{children:["This library brings ",(0,i.jsx)(t.strong,{children:"true native portals"})," into React Native by teleportation views at the native layer (iOS/Android/web)."]}),"\n",(0,i.jsxs)(t.p,{children:["\u2705 The component stays in the ",(0,i.jsx)(t.strong,{children:"original React tree"}),", preserving contexts and state.",(0,i.jsx)(t.br,{}),"\n","\u2705 The view is physically moved in the ",(0,i.jsx)(t.strong,{children:"native view hierarchy"}),", so layout, z-order, and performance behave like any other native view.",(0,i.jsx)(t.br,{}),"\n","\u2705 Works seamlessly across ",(0,i.jsx)(t.strong,{children:"iOS, Android, and Web"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"You can think of it as:"}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.strong,{children:'"Teleport your view in native space, without breaking React logic."'})}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"why-native-portals-matter",children:"Why native portals matter"}),"\n",(0,i.jsx)(t.p,{children:"In native development, portals are widely used to implement flexible UI patterns. Bringing them to React Native fills a long-standing gap:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Re-parenting without losing state"})," \u2192 teleport a view while keeping its internal state intact."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Mirroring support"})," \u2192 create a live copy of a view elsewhere in the tree (similar to a real-time snapshot)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Powerful composition"})," \u2192 enable UI patterns that were previously difficult or impossible with JS-only portals."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(t.p,{children:["Ready to get started? \ud83d\ude80 Head over to the ",(0,i.jsx)(t.a,{href:"installation",children:"Installation"})," guide."]})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>s});var n=r(6540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);