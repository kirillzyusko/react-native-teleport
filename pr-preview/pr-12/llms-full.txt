# react-native-teleport

> Documentation for react-native-teleport. Package that allows to teleport views across your component tree for seamless transitions and powerful UI patterns.


## react-native-teleport


### pr-preview


#### pr-12

Description will go into a meta tag in <head />

- [Teleport](/index.md): Description will go into a meta tag in <head />
- [Portal](/docs/api/components/portal.md): A component that moves its children to a different place in the view hierarchy.
- [PortalHost](/docs/api/components/portal-host.md): A component that acts as an anchor for the portals.
- [PortalProvider](/docs/api/components/portal-provider.md): A component that should wrap your app.
- [usePortal](/docs/api/hooks/use-portal.md): Hook that allows to manage portals.
- [üìö Components](/docs/category/-components.md): A set of JS components that helps you to render components outside of current component
- [üé£ Hooks](/docs/category/-hooks.md): React hooks provided by this library
- [API Reference](/docs/category/api-reference.md): API reference containing information about all public methods and their signatures
- [Guides](/docs/category/guides.md): Basic concepts and most useful topics to start quickly.
- [Recipes](/docs/category/recipes.md): Various tutorials to help you get the most out of the library.
- [Portal](/docs/guides/portal.md): Portal helps you to render a component in a different place in the view hierarchy.
- [Teleport](/docs/guides/teleport.md): Teleport helps you to re-use existing component and render it in a different part of tree without remounting and resetting the internal state.
- [Installation](/docs/installation.md): Guide dedicated to installation process
- [Intro](/docs/intro.md): Intro into portal and teleport concepts
- [Jest testing guide](/docs/recipes/jest-testing-guide.md): A testing-guide showing how to write unit-tests using jest


---

# Full Documentation Content

# Portal

## Props[‚Äã](#props "Direct link to Props")

### `name`[‚Äã](#name "Direct link to name")

The name of the portal. It's used to identify the portal in the context of the portal host.

### `hostName`[‚Äã](#hostname "Direct link to hostname")

The name of the portal host. It's used to identify the host where the content should be rendered.

### `children`[‚Äã](#children "Direct link to children")

The content that should be rendered in the portal.

## Example[‚Äã](#example "Direct link to Example")

```
import { useState } from "react";
import { View, StyleSheet, Button } from "react-native";
import { Portal } from "react-native-teleport";

export default function InstantRootExample() {
  const [shouldBeTeleported, setTeleported] = useState(true);

  return (
    <View style={styles.container}>
      {shouldBeTeleported && (
        <Portal hostName={"overlay"}>
          <View style={styles.box} testID="touchable" />
        </Portal>
      )}
      <Button
        title={shouldBeTeleported ? "Hide" : "Show"}
        onPress={() => setTeleported((t) => !t)}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  box: {
    width: 160,
    height: 160,
    marginVertical: 20,
    backgroundColor: "blue",
  },
});
```


---

# PortalHost

`PortalHost` is a component that acts as an anchor for the portals. You can define multiple portal hosts in your app and use them to render different portals. Each portal host has a unique name that you can use to identify a necessary one among the others.

## Props[‚Äã](#props "Direct link to Props")

### `name`[‚Äã](#name "Direct link to name")

The name of the portal host. It's used to identify the host by `<Portal />` component.

## Example[‚Äã](#example "Direct link to Example")

```
import { StyleSheet, View } from "react-native";
import { PortalHost, PortalProvider } from "react-native-teleport";
import {
  initialWindowMetrics,
  SafeAreaProvider,
} from "react-native-safe-area-context";
import RootStack from "./navigation";

export default function App() {
  return (
    <SafeAreaProvider initialMetrics={initialWindowMetrics}>
      <PortalProvider>
        <RootStack />
        <View style={StyleSheet.absoluteFillObject} pointerEvents="box-none">
          <PortalHost name="overlay" />
        </View>
      </PortalProvider>
    </SafeAreaProvider>
  );
}
```


---

# PortalProvider

Wrap your app with this component to use the portal API.

This component provides a context/registry for all Portals so that you can use imperative API, such as `usePortal` hook to manage Portals.

## Example[‚Äã](#example "Direct link to Example")

```
import { PortalProvider } from "react-native-teleport";

export default function App() {
  return (
    <PortalProvider>
      {/* your main application code goes here */}
    </PortalProvider>
  );
}
```


---

# usePortal

The `usePortal` hook allows you to manage portals in imperative way.

## Example[‚Äã](#example "Direct link to Example")

```
import { usePortal } from "react-native-teleport";

export default function App() {
  const { removePortal } = usePortal("root");

  return (
    <View style={{ flex: 1 }}>
      <Button title="Remove" onPress={() => removePortal("portal")} />
    </View>
  );
}
```

## Declaration[‚Äã](#declaration "Direct link to Declaration")

```
/**
 * @param hostName - `name` of the `<PortalHost />` component
 */
type usePortal = (hostName: string = 'root') => {
  /**
   * Remove portal from host container. Subsequent re-renders will not resurrect portal,
   * but if you mount a new portal with the same name it will be shown (i. e. hook doesn't
   * prevent new portal from being added).
   * @param name - `name` of `<Portal />` component.
   */
  removePortal: (name: string) => void;
};
```


---

## [üìÑÔ∏è<!-- --> <!-- -->PortalProvider](/react-native-teleport/pr-preview/pr-12/docs/api/components/portal-provider.md)

[A component that should wrap your app.](/react-native-teleport/pr-preview/pr-12/docs/api/components/portal-provider.md)


---

## [üìÑÔ∏è<!-- --> <!-- -->usePortal](/react-native-teleport/pr-preview/pr-12/docs/api/hooks/use-portal.md)

[Hook that allows to manage portals.](/react-native-teleport/pr-preview/pr-12/docs/api/hooks/use-portal.md)


---

## [üóÉÔ∏è<!-- --> <!-- -->üìö Components](/react-native-teleport/pr-preview/pr-12/docs/category/-components.md)

[3 items](/react-native-teleport/pr-preview/pr-12/docs/category/-components.md)


---

## [üìÑÔ∏è<!-- --> <!-- -->Portal](/react-native-teleport/pr-preview/pr-12/docs/guides/portal.md)

[Portal helps you to render a component in a different place in the view hierarchy.](/react-native-teleport/pr-preview/pr-12/docs/guides/portal.md)


---

## [üìÑÔ∏è<!-- --> <!-- -->Jest testing guide](/react-native-teleport/pr-preview/pr-12/docs/recipes/jest-testing-guide.md)

[A testing-guide showing how to write unit-tests using jest](/react-native-teleport/pr-preview/pr-12/docs/recipes/jest-testing-guide.md)


---

# Portal

The **Portal** API allows you to render a component in a different place in the view hierarchy. This is useful when you need a view to visually ‚Äúbreak out‚Äù of its parent container (for example: modals, toasts, floating UI, popovers).

![Portal helps to render a new view in a different container](/react-native-teleport/pr-preview/pr-12/assets/images/portal-2b20b94e26669e61959d937697ed6dde.png)

Unlike simple `zIndex` tricks, Portals actually move the native view to another container, which guarantees correct behavior across different platforms, stacking contexts, and clipping boundaries.

## Why use Portal?[‚Äã](#why-use-portal "Direct link to Why use Portal?")

* Escape parent clipping: Portals are not limited by `overflow: hidden` or scroll containers.
* Native-level stacking: Works even where `zIndex` fails.
* Cross-platform: Consistent on iOS, Android and web.
* Dynamic UI: Great for modals, floating buttons, dropdowns, tooltips, and system-like overlays.

## Example[‚Äã](#example "Direct link to Example")

```
import { useState } from "react";
import { View, StyleSheet, Button } from "react-native";
import { Portal } from "react-native-teleport";

export default function InstantRootExample() {
  const [shouldBeTeleported, setTeleported] = useState(true);

  return (
    <View style={styles.container}>
      {shouldBeTeleported && (
        <Portal hostName={"overlay"}>
          <View style={styles.box} testID="touchable" />
        </Portal>
      )}
      <Button
        title={shouldBeTeleported ? "Hide" : "Show"}
        onPress={() => setTeleported((t) => !t)}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  box: {
    width: 160,
    height: 160,
    marginVertical: 20,
    backgroundColor: "blue",
  },
});
```

## Best practices[‚Äã](#best-practices "Direct link to Best practices")

* Always declare at least one `<PortalHost />` near your app root.
* Use host names if you need multiple layers (e.g., modal, toast, tooltip).

Teleportation

‚ö° **Tip**: If you need to move an **existing** view (without unmounting/remounting), check out [Teleport](/react-native-teleport/pr-preview/pr-12/docs/guides/teleport.md) guide.


---

# Teleport

The **Teleport** concept allows you to move an **existing view** to a different place in the hierarchy **without unmounting or remounting** it. This means the component keeps its internal state (animations, scroll position, video progress, etc.) even after being visually moved. This pattern is also known as **re-parenting**.

![Teleport helps to move existing view between different layers without losing state](/react-native-teleport/pr-preview/pr-12/assets/images/teleport-65785a9f1211bc6992db0cca2993d621.png)

## Example[‚Äã](#example "Direct link to Example")

App.tsx

```
import { StyleSheet, View } from "react-native";
import { PortalHost, PortalProvider } from "react-native-teleport";
import {
  initialWindowMetrics,
  SafeAreaProvider,
} from "react-native-safe-area-context";
import { NavigationContainer } from "@react-navigation/native";
import RootStack from "./navigation";
import { GestureHandlerRootView } from "react-native-gesture-handler";

export default function App() {
  return (
    <SafeAreaProvider initialMetrics={initialWindowMetrics}>
      <GestureHandlerRootView style={styles.container}>
        <PortalProvider>
          {/* Deeply nested <Teleport /> component goes here */}
          <View style={StyleSheet.absoluteFillObject} pointerEvents="box-none">
            <PortalHost name="overlay" />
          </View>
        </PortalProvider>
      </GestureHandlerRootView>
    </SafeAreaProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
```

Teleport.tsx

```
import LottieView from "lottie-react-native";
import { useRef, useState } from "react";
import {
  View,
  Text,
  ScrollView,
  TouchableWithoutFeedback,
  StyleSheet,
  Animated,
  useAnimatedValue,
  Easing,
  Pressable,
} from "react-native";
import { BlurView } from "@react-native-community/blur";
import { Portal } from "react-native-teleport";

const messages = [
  { text: "Hello, how are you", sender: true },
  { text: "Hello, not too bad! You?", sender: false },
  { text: "I'm fine, thanks", sender: true },
  { text: "What is your plan for evening today?", sender: true },
  { text: "I'm not sure yet... Any ideas?", sender: false },
  { text: "Sure, let's go for a walk?", sender: true },
];

const Message = ({ sender, text }) => {
  return (
    <View
      style={{
        flexDirection: "row",
        width: "100%",
        justifyContent: sender ? "flex-end" : "flex-start",
      }}
    >
      <Text
        style={{
          opacity: 1,
          color: "black",
          padding: 10,
          backgroundColor: sender ? "#38f269" : "#38c7f2",
          margin: 10,
          borderRadius: 10,
        }}
      >
        {text}
      </Text>
    </View>
  );
};

export default function Messenger() {
  const viewRef = useRef<View | null>(null);
  const opacity = useRef(new Animated.Value(0)).current;
  const [teleport, setTeleported] = useState(false);
  const [style, setStyle] = useState(null);

  const handleClick = () => {
    Animated.timing(opacity, {
      toValue: 1,
      duration: 250,
      easing: Easing.inOut(Easing.ease),
      useNativeDriver: true,
    }).start();
    viewRef.current?.measureInWindow((x, y) => {
      setTeleported(true);
      setStyle({
        paddingTop: y,
      });
    });
  };

  return (
    <View style={{ flex: 1 }}>
      <ScrollView>
        {messages.map((item) => (
          <Message key={item.text} {...item} />
        ))}
        <View
          ref={viewRef}
          style={{
            width: "100%",
            justifyContent: "flex-start",
            flexDirection: "row",
          }}
        >
          <Portal hostName={teleport ? "overlay" : undefined}>
            <Pressable onPress={handleClick} style={style ?? {}}>
              <LottieView
                source={require("../../assets/lottie/bear.json")}
                style={[{ width: 200, height: 200 }]}
                autoPlay
                loop
              />
            </Pressable>
          </Portal>
        </View>
      </ScrollView>
      <Animated.View
        style={[StyleSheet.absoluteFillObject, { opacity: opacity }]}
        pointerEvents="none"
      >
        <BlurView
          style={StyleSheet.absoluteFillObject}
          pointerEvents="none"
          blurType="light"
          blurAmount={16}
        />
      </Animated.View>
    </View>
  );
}
```

## Why use Teleport?[‚Äã](#why-use-teleport "Direct link to Why use Teleport?")

* **Preserve state**: No unmount/remount ‚Äî animations, scroll, video, inputs remain intact.
* **Build advanced transitions**: Implement shared-element‚Äìstyle transitions between screens.
* **Escape container limits**: Move a view to an overlay while keeping its internal logic alive.
* **Power complex UI**: Great for photo galleries, YouTube-like mini players, context menu transitions, app tours, off-screen pre-rendering, etc.


---

# Installation

## Adding a library to the project[‚Äã](#adding-a-library-to-the-project "Direct link to Adding a library to the project")

Install the `react-native-teleport` package in your React Native project.

* YARN
* NPM
* EXPO

```
yarn add react-native-teleport
```

```
npm install react-native-teleport --save
```

```
npx expo install react-native-teleport
```

Only Expo Dev client compatible

This library has native code, so it **does not work** with *Expo Go* but it's fully compatible with [custom dev client](https://docs.expo.dev/development/getting-started/).

### Linking[‚Äã](#linking "Direct link to Linking")

This package supports [autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md).

Pods update

After adding the package don't forget to **re-install** `pods` and **re-assemble** `android` and `ios` applications, since this library contains native code.

If you still experience issues like **package doesn't seem to be linked** try performing a fresh build to clear any outdated cache.

## Adding provider[‚Äã](#adding-provider "Direct link to Adding provider")

In order to use it you'll need to wrap your app with `PortalProvider` component.

```
import { PortalProvider } from "react-native-teleport";

export default function App() {
  return (
    <PortalProvider>
      {/* your main application code goes here */}
    </PortalProvider>
  );
}
```

Congratulations! üéâ You've just finished installation process. Go to the [next section](/react-native-teleport/pr-preview/pr-12/docs/guides/portal.md) to get more insights of what you can do using this library. üòé


---

# Intro

## What is the portal?[‚Äã](#what-is-the-portal "Direct link to What is the portal?")

A **Portal** lets you render a component somewhere else in the UI tree, while keeping it logically inside its parent.<br /><!-- -->Typical use cases include **modals**, **tooltips**, **popovers**, and other overlays where the visual position differs from the React tree position.

On the web this is done with [`createPortal`](https://react.dev/reference/react-dom/createPortal), but React Native has no built-in solution ([issue #36273](https://github.com/facebook/react-native/issues/36273)).

## Existing solutions (and their limits)[‚Äã](#existing-solutions-and-their-limits "Direct link to Existing solutions (and their limits)")

Community libraries like [@gorhom/portal](https://github.com/gorhom/react-native-portal) or [react-gateway](https://github.com/cloudflare/react-gateway) emulate portals in **JavaScript**. They work, but:

‚ùå Components are **re-parented in JS**, not in the actual native view tree.<br /><!-- -->‚ùå This can break or block access to **React Context** values (theme, navigation, i18n, etc.).<br /><!-- -->‚ùå Rendering is still bound to the JS layer, which can limit **performance** and **platform-native behaviors**.

## Introducing `react-native-teleport`[‚Äã](#introducing-react-native-teleport "Direct link to introducing-react-native-teleport")

This library brings **true native portals** to React Native:

‚úÖ The component stays in the **original React tree** ‚Üí contexts & state are preserved.<br /><!-- -->‚úÖ The view is physically moved in the **native view hierarchy** ‚Üí correct layout, z-order & performance.<br /><!-- -->‚úÖ Works across **iOS, Android, and Web**.<br /><!-- -->‚úÖ Supports not only portals but also **re-parenting (teleport)**: move an existing view without unmounting it.

You can think of it as:

> **"Teleport your view in native space, without breaking React logic."**

## Comparison[‚Äã](#comparison "Direct link to Comparison")

|                                                         | `react-native-teleport` | `@gorhom/portal` |
| ------------------------------------------------------- | ----------------------- | ---------------- |
| Render local component in a different place in the tree | ‚úÖ                      | ‚úÖ               |
| Support multiple hosts/portals                          | ‚úÖ                      | ‚úÖ               |
| Native implementation                                   | ‚úÖ                      | ‚ùå               |
| Keeps React tree continuity                             | ‚úÖ                      | ‚ùå               |
| Preserves React context                                 | ‚úÖ                      | ‚ùå               |
| Move views without losing state (teleport)              | ‚úÖ                      | ‚ùå               |
| Mirroring 1                                             | üü† 2                    | ‚ùå               |

> 1 create a live copy of a view elsewhere in the tree (similar to a real-time snapshot).

> 2 Is planned to be added in the future

***

## Next steps[‚Äã](#next-steps "Direct link to Next steps")

Ready to get started? üöÄ Head over to the [Installation](/react-native-teleport/pr-preview/pr-12/docs/installation.md) guide.


---

# Jest testing guide

## Setting up a mock[‚Äã](#setting-up-a-mock "Direct link to Setting up a mock")

This library includes a built in mock for Jest. To use it, add the following code to the [jest setup](https://jestjs.io/docs/configuration#setupfiles-array) file:

```
jest.mock("react-native-teleport", () =>
  require("react-native-teleport/jest"),
);
```

## Test case example[‚Äã](#test-case-example "Direct link to Test case example")

Once you've set up mock - you can write your first test üòä. A sample of test case is shown below. For more test cases please see [this](https://github.com/kirillzyusko/react-native-teleport/tree/main/example/__tests__) link.

```
import { render, screen } from "@testing-library/react-native";

import { View } from "react-native";

import { PortalProvider, PortalHost, Portal } from "react-native-teleport";

function TestComponent() {
  return (
    <PortalProvider>
      <PortalHost name="app" />
      <View>
        <Portal hostName="app" name="modal">
          <View />
        </Portal>
      </View>
    </PortalProvider>
  );
}

describe("portal rendering", () => {
  it("should render without errors", () => {
    render(<TestComponent />);

    expect(screen.toJSON()).toMatchSnapshot();
  });
});
```


---

[Skip to main content](#__docusaurus_skipToContent_fallback)

[![Teleport Logo](/react-native-teleport/pr-preview/pr-12/img/logo.svg)![Teleport Logo](/react-native-teleport/pr-preview/pr-12/img/logo.svg)](/react-native-teleport/pr-preview/pr-12/.md)

[**Teleport**](/react-native-teleport/pr-preview/pr-12/.md)[Guides](/react-native-teleport/pr-preview/pr-12/docs/intro.md)[API](/react-native-teleport/pr-preview/pr-12/docs/category/api-reference.md)[Blog](/react-native-teleport/pr-preview/pr-12/blog)[Next](/react-native-teleport/pr-preview/pr-12/docs/intro.md)

[Example App](https://github.com/kirillzyusko/react-native-teleport/tree/main/example)[GitHub](https://github.com/kirillzyusko/react-native-teleport)

![](/react-native-teleport/pr-preview/pr-12/assets/images/teleport-65785a9f1211bc6992db0cca2993d621.png)

# Teleport

Missing native portal implementation for react-native

[Get started](/react-native-teleport/pr-preview/pr-12/docs/intro.md)

Docs

* [Guides](/react-native-teleport/pr-preview/pr-12/docs/installation.md)
* [Recipes](/react-native-teleport/pr-preview/pr-12/docs/category/recipes.md)
* [API](/react-native-teleport/pr-preview/pr-12/docs/category/api-reference.md)

Community

* [GitHub discussions](https://github.com/kirillzyusko/react-native-keyboard-controller/discussions)
* [X](https://x.com/ziusko)

More

* [Blog](/react-native-teleport/pr-preview/pr-12/blog)
* [GitHub](https://github.com/kirillzyusko/react-native-teleport)

Copyright ¬© 2025 Kirill Zyusko. Built with Docusaurus.


---

