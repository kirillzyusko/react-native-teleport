# react-native-teleport

> Documentation for react-native-teleport. Package that allows to teleport views across your component tree for seamless transitions and powerful UI patterns.


## react-native-teleport


### pr-preview


#### pr-12

Description will go into a meta tag in <head />

- [Teleport](/index.md): Description will go into a meta tag in <head />
- [Portal](/docs/api/components/portal.md): A component that moves its children to a different place in the view hierarchy.
- [PortalHost](/docs/api/components/portal-host.md): A component that acts as an anchor for the portals.
- [PortalProvider](/docs/api/components/portal-provider.md): A component that should wrap your app.
- [use-portal](/docs/api/hooks/use-portal.md): Hook that allows to manage portals.
- [üìö Components](/docs/category/-components.md): A set of JS components that helps you to render components outside of current component
- [üé£ Hooks](/docs/category/-hooks.md): React hooks provided by this library
- [API Reference](/docs/category/api-reference.md): API reference containing information about all public methods and their signatures
- [Guides](/docs/category/guides.md): Basic concepts and most useful topics to start quickly.
- [Recipes](/docs/category/recipes.md): Various tutorials to help you get the most out of the library.
- [Main concepts](/docs/guides/main-concepts.md): A quick tour in terminology and main concepts of this library.
- [Portal](/docs/guides/portal.md): Portal helps you to render a component in a different place in the view hierarchy.
- [Teleport](/docs/guides/teleport.md): Teleport helps you to re-use existing component and render it in a different part of tree without remounting and resetting the internal state.
- [Installation](/docs/installation.md): Guide dedicated to installation process
- [Intro](/docs/intro.md): Intro into portal and teleport concepts
- [index](/docs/recipes.md)


---

# Full Documentation Content

# Portal

## Props[‚Äã](#props "Direct link to Props")

### `name`[‚Äã](#name "Direct link to name")

The name of the portal. It's used to identify the portal in the context of the portal host.

### `hostName`[‚Äã](#hostname "Direct link to hostname")

The name of the portal host. It's used to identify the host where the content should be rendered.

### `children`[‚Äã](#children "Direct link to children")

The content that should be rendered in the portal.

## Example[‚Äã](#example "Direct link to Example")


---

# PortalHost

`PortalHost` is a component that acts as an anchor for the portals. You can define multiple portal hosts in your app and use them to render different portals. Each portal host has a unique name that you can use to identify a necessary one among the others.

## Props[‚Äã](#props "Direct link to Props")

### `name`[‚Äã](#name "Direct link to name")

The name of the portal host. It's used to identify the host by `<Portal />` component.

## Example[‚Äã](#example "Direct link to Example")


---

# PortalProvider

Wrap your app with this component to use the portal API.

This component provides a context/registry for all Portals so that you can use imperative API, such as `usePortal` hook to manage Portals.

## Example[‚Äã](#example "Direct link to Example")

```
import { PortalProvider } from "react-native-teleport";

export default function App() {
  return (
    <PortalProvider>
      {/* your main application code goes here */}
    </PortalProvider>
  );
}
```


---

# use-portal


---

## [üìÑÔ∏è<!-- --> <!-- -->PortalProvider](/react-native-teleport/pr-preview/pr-12/docs/api/components/portal-provider.md)

[A component that should wrap your app.](/react-native-teleport/pr-preview/pr-12/docs/api/components/portal-provider.md)


---

## [üìÑÔ∏è<!-- --> <!-- -->use-portal](/react-native-teleport/pr-preview/pr-12/docs/api/hooks/use-portal.md)

[Hook that allows to manage portals.](/react-native-teleport/pr-preview/pr-12/docs/api/hooks/use-portal.md)


---

## [üóÉÔ∏è<!-- --> <!-- -->üìö Components](/react-native-teleport/pr-preview/pr-12/docs/category/-components.md)

[3 items](/react-native-teleport/pr-preview/pr-12/docs/category/-components.md)


---

## [üìÑÔ∏è<!-- --> <!-- -->Main concepts](/react-native-teleport/pr-preview/pr-12/docs/guides/main-concepts.md)

[A quick tour in terminology and main concepts of this library.](/react-native-teleport/pr-preview/pr-12/docs/guides/main-concepts.md)


---

## [üìÑÔ∏è<!-- --> <!-- -->index](/react-native-teleport/pr-preview/pr-12/docs/recipes.md)


---

# Main concepts

## Comparison[‚Äã](#comparison "Direct link to Comparison")


---

# Portal

The **Portal** API allows you to render a component in a different place in the view hierarchy without unmounting it. This is useful when you need a view to visually ‚Äúbreak out‚Äù of its parent container (for example: modals, toasts, floating UI, popovers).

Unlike simple `zIndex` tricks, Portals actually move the native view to another container, which guarantees correct behavior across different platforms, stacking contexts, and clipping boundaries.

## Why use Portal?[‚Äã](#why-use-portal "Direct link to Why use Portal?")

* Escape parent clipping: Portals are not limited by `overflow: hidden` or scroll containers.
* Native-level stacking: Works even where `zIndex` fails.
* Cross-platform: Consistent on iOS, Android and web.
* Dynamic UI: Great for modals, floating buttons, dropdowns, tooltips, and system-like overlays.

// TODO: check example validity

## Example[‚Äã](#example "Direct link to Example")

```
import { Portal, PortalHost } from "react-native-teleport";
import { View, Text, Button } from "react-native";

export default function App() {
  const [visible, setVisible] = React.useState(false);

  return (
    <View style={{ flex: 1 }}>
      <Button title="Open modal" onPress={() => setVisible(true)} />

      {/* Place a PortalHost at the root of your app */}
      <PortalHost name="root" />

      {visible && (
        <Portal host="root">
          <View
            style={{
              position: "absolute",
              top: 100,
              left: 50,
              width: 200,
              height: 200,
              backgroundColor: "white",
              elevation: 10,
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <Text>Hello from Portal!</Text>
            <Button title="Close" onPress={() => setVisible(false)} />
          </View>
        </Portal>
      )}
    </View>
  );
}
```

## Best practices[‚Äã](#best-practices "Direct link to Best practices")

* Always declare at least one `<PortalHost />` near your app root.
* Use host names if you need multiple layers (e.g., modal, toast, tooltip).

Teleportation

‚ö° Tip: If you need to move an existing view (without unmounting/remounting), check out Teleport (Reparenting).


---

# Teleport


---

# Installation

## Adding a library to the project[‚Äã](#adding-a-library-to-the-project "Direct link to Adding a library to the project")

Install the `react-native-teleport` package in your React Native project.

* YARN
* NPM
* EXPO

```
yarn add react-native-teleport
```

```
npm install react-native-teleport --save
```

```
npx expo install react-native-teleport
```

Only Expo Dev client compatible

This library has native code, so it **does not work** with *Expo Go* but it's fully compatible with [custom dev client](https://docs.expo.dev/development/getting-started/).

### Linking[‚Äã](#linking "Direct link to Linking")

This package supports [autolinking](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md).

Pods update

After adding the package don't forget to **re-install** `pods` and **re-assemble** `android` and `ios` applications, since this library contains native code.

If you still experience issues like **package doesn't seem to be linked** try performing a fresh build to clear any outdated cache.

## Adding provider[‚Äã](#adding-provider "Direct link to Adding provider")

In order to use it you'll need to wrap your app with `PortalProvider` component.

```
import { PortalProvider } from "react-native-teleport";

export default function App() {
  return (
    <PortalProvider>
      {/* your main application code goes here */}
    </PortalProvider>
  );
}
```

Congratulations! üéâ You've just finished installation process. Go to the [next section](/react-native-teleport/pr-preview/pr-12/docs/guides/portal.md) to get more insights of what you can do using this library. üòé


---

# Intro

## What is the portal?[‚Äã](#what-is-the-portal "Direct link to What is the portal?")

A **Portal** is a React concept that lets you render a component in a different place in the UI tree, while keeping it logically connected to its parent.

On the web, this is typically done with [`createPortal`](https://react.dev/reference/react-dom/createPortal).

Portals are commonly used for UI elements such as:

* Modals
* Tooltips
* Popovers
* Floating views

These are cases where the visual position of a component differs from its logical position in the React tree.

***

## Why another portal library for `react-native`?[‚Äã](#why-another-portal-library-for-react-native "Direct link to why-another-portal-library-for-react-native")

React Native does **not yet provide** a built-in `Portal` implementation ([issue #36273](https://github.com/facebook/react-native/issues/36273)).<br /><!-- -->Existing community libraries, such as [@gorhom/portal](https://github.com/gorhom/react-native-portal) or [react-gateway](https://github.com/cloudflare/react-gateway), solve this with **JavaScript-based portals**. They work well for many scenarios but come with important trade-offs:

‚ùå Components are **re-parented in JS**, not in the actual native view tree.<br /><!-- -->‚ùå This can break or block access to **React Context** values (theme, navigation, i18n, etc.).<br /><!-- -->‚ùå Rendering is still bound to the JS layer, which can limit **performance** and **platform-native behaviors**.

***

## Introducing `react-native-teleport`[‚Äã](#introducing-react-native-teleport "Direct link to introducing-react-native-teleport")

This library brings **true native portals** into React Native by teleportation views at the native layer (iOS/Android/web).

‚úÖ The component stays in the **original React tree**, preserving contexts and state.<br /><!-- -->‚úÖ The view is physically moved in the **native view hierarchy**, so layout, z-order, and performance behave like any other native view.<br /><!-- -->‚úÖ Works seamlessly across **iOS, Android, and Web**.

You can think of it as:

> **"Teleport your view in native space, without breaking React logic."**

## Why native portals matter[‚Äã](#why-native-portals-matter "Direct link to Why native portals matter")

In native development, portals are widely used to implement flexible UI patterns. Bringing them to React Native fills a long-standing gap:

* **Re-parenting without losing state** ‚Üí teleport a view while keeping its internal state intact.
* **Mirroring support** ‚Üí create a live copy of a view elsewhere in the tree (similar to a real-time snapshot).
* **Powerful composition** ‚Üí enable UI patterns that were previously difficult or impossible with JS-only portals.

***

## Next steps[‚Äã](#next-steps "Direct link to Next steps")

Ready to get started? üöÄ Head over to the [Installation](/react-native-teleport/pr-preview/pr-12/docs/installation.md) guide.


---

# index


---

[Skip to main content](#__docusaurus_skipToContent_fallback)

[![Teleport Logo](/react-native-teleport/pr-preview/pr-12/img/logo.svg)![Teleport Logo](/react-native-teleport/pr-preview/pr-12/img/logo.svg)](/react-native-teleport/pr-preview/pr-12/.md)

[**Teleport**](/react-native-teleport/pr-preview/pr-12/.md)[Guides](/react-native-teleport/pr-preview/pr-12/docs/intro.md)[API](/react-native-teleport/pr-preview/pr-12/docs/category/api-reference.md)[Blog](/react-native-teleport/pr-preview/pr-12/blog)[Next](/react-native-teleport/pr-preview/pr-12/docs/intro.md)

[Example App](https://github.com/kirillzyusko/react-native-teleport/tree/main/example)[GitHub](https://github.com/kirillzyusko/react-native-teleport)

![](/react-native-teleport/pr-preview/pr-12/assets/images/demo-65785a9f1211bc6992db0cca2993d621.png)

# Teleport

Missing native portal implementation for react-native

[Get started](/react-native-teleport/pr-preview/pr-12/docs/intro.md)

Docs

* [Guides](/react-native-teleport/pr-preview/pr-12/docs/installation.md)
* [Recipes](/react-native-teleport/pr-preview/pr-12/docs/category/recipes.md)
* [API](/react-native-teleport/pr-preview/pr-12/docs/category/api-reference.md)

Community

* [GitHub discussions](https://github.com/kirillzyusko/react-native-keyboard-controller/discussions)
* [X](https://x.com/ziusko)

More

* [Blog](/react-native-teleport/pr-preview/pr-12/blog)
* [GitHub](https://github.com/kirillzyusko/react-native-teleport)

Copyright ¬© 2025 Kirill Zyusko. Built with Docusaurus.


---

