<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="rss.xsl"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Teleport Blog</title>
        <link>https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog</link>
        <description>Teleport Blog</description>
        <lastBuildDate>Thu, 02 Oct 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[Meet teleport!]]></title>
            <link>https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog/welcome</link>
            <guid>https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog/welcome</guid>
            <pubDate>Thu, 02 Oct 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Hello!]]></description>
            <content:encoded><![CDATA[<p>Hello!</p>
<p>You may be curious why another portal library for react-native is needed?</p>
<ul>
<li>component stays in react-tree</li>
<li>package uses native primitives to teleport views (i. e. <code>createPortal</code> on web etc.)</li>
<li>as a result we already can teleport views preserving internal component state</li>
<li>in native development portals are also widespread concepts, but they even offer more advanced features such as "mirroring"</li>
<li>the ultimate goal not only build primitives for teleportation views, but also provide a set of patterns and ready libs to build complex UIs (context menus, various shared transitions)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-native-portals-matter">Why native portals matter<a href="https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog/welcome#why-native-portals-matter" class="hash-link" aria-label="Direct link to Why native portals matter" title="Direct link to Why native portals matter">​</a></h2>
<p>In native development, portals are widely used to implement flexible UI patterns. Bringing them to React Native fills a long-standing gap:</p>
<ul>
<li><strong>Re-parenting without losing state</strong> → teleport a view while keeping its internal state intact.</li>
<li><strong>Mirroring support</strong> → create a live copy of a view elsewhere in the tree (similar to a real-time snapshot).</li>
<li><strong>Powerful composition</strong> → enable UI patterns that were previously difficult or impossible with JS-only portals.</li>
</ul>]]></content:encoded>
            <category>teleport</category>
            <category>react-native</category>
            <category>portal</category>
        </item>
    </channel>
</rss>