<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog</id>
    <title>Teleport Blog</title>
    <updated>2025-10-02T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog"/>
    <subtitle>Teleport Blog</subtitle>
    <icon>https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Meet teleport!]]></title>
        <id>https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog/welcome</id>
        <link href="https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog/welcome"/>
        <updated>2025-10-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello!]]></summary>
        <content type="html"><![CDATA[<p>Hello!</p>
<p>You may be curious why another portal library for react-native is needed?</p>
<ul>
<li>component stays in react-tree</li>
<li>package uses native primitives to teleport views (i. e. <code>createPortal</code> on web etc.)</li>
<li>as a result we already can teleport views preserving internal component state</li>
<li>in native development portals are also widespread concepts, but they even offer more advanced features such as "mirroring"</li>
<li>the ultimate goal not only build primitives for teleportation views, but also provide a set of patterns and ready libs to build complex UIs (context menus, various shared transitions)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-native-portals-matter">Why native portals matter<a href="https://kirillzyusko.github.io/react-native-teleport/pr-preview/pr-12/blog/welcome#why-native-portals-matter" class="hash-link" aria-label="Direct link to Why native portals matter" title="Direct link to Why native portals matter">​</a></h2>
<p>In native development, portals are widely used to implement flexible UI patterns. Bringing them to React Native fills a long-standing gap:</p>
<ul>
<li><strong>Re-parenting without losing state</strong> → teleport a view while keeping its internal state intact.</li>
<li><strong>Mirroring support</strong> → create a live copy of a view elsewhere in the tree (similar to a real-time snapshot).</li>
<li><strong>Powerful composition</strong> → enable UI patterns that were previously difficult or impossible with JS-only portals.</li>
</ul>]]></content>
        <author>
            <name>Kirill Zyusko</name>
            <uri>https://github.com/kirillzyusko</uri>
        </author>
        <category label="teleport" term="teleport"/>
        <category label="react-native" term="react-native"/>
        <category label="portal" term="portal"/>
    </entry>
</feed>