"use strict";(self.webpackChunkreact_native_teleport_docs=self.webpackChunkreact_native_teleport_docs||[]).push([[8268],{822:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"api/hooks/use-portal","title":"usePortal","description":"Hook that allows to manage portals.","source":"@site/docs/api/hooks/use-portal.md","sourceDirName":"api/hooks","slug":"/api/hooks/use-portal","permalink":"/react-native-teleport/docs/api/hooks/use-portal","draft":false,"unlisted":false,"editUrl":"https://github.com/kirillzyusko/react-native-teleport/tree/main/docs/docs/api/hooks/use-portal.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"description":"Hook that allows to manage portals.","keywords":["react-native-teleport","react-native teleport","react-native portal","usePortal","removePortal","remove portal"]},"sidebar":"tutorialSidebar","previous":{"title":"\ud83c\udfa3 Hooks","permalink":"/react-native-teleport/docs/category/-hooks"}}');var a=o(4848),n=o(8453);const s={sidebar_position:1,description:"Hook that allows to manage portals.",keywords:["react-native-teleport","react-native teleport","react-native portal","usePortal","removePortal","remove portal"]},l="usePortal",i={},c=[{value:"Example",id:"example",level:2},{value:"Declaration",id:"declaration",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"useportal",children:"usePortal"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"usePortal"})," hook allows you to manage portals in imperative way."]}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-tsx",children:'import { usePortal } from "react-native-teleport";\n\nexport default function App() {\n  const { removePortal } = usePortal("root");\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Button title="Remove" onPress={() => removePortal("portal")} />\n    </View>\n  );\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"declaration",children:"Declaration"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'/**\n * @param hostName - `name` of the `<PortalHost />` component\n */\ntype usePortal = (hostName: string = "root") => {\n  /**\n   * Remove portal from host container. Subsequent re-renders will not resurrect portal,\n   * but if you mount a new portal with the same name it will be shown (i. e. hook doesn\'t\n   * prevent new portal from being added).\n   * @param name - `name` of `<Portal />` component.\n   */\n  removePortal: (name: string) => void;\n};\n'})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>l});var r=o(6540);const a={},n=r.createContext(a);function s(e){const t=r.useContext(n);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(n.Provider,{value:t},e.children)}}}]);